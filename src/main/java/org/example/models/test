

RestAPI (Representational State Transfer Application Programming Interface) is an architectural style for designing network applications.
It uses the HTTP protocol for communication between the client and the server. RestAPI relies on resources identified by unique URIs,
and operations on those resources are performed via standard HTTP methods such as GET, POST, PUT and DELETE.

CRUD (Create, Read, Update, Delete) are basic operations performed on data. CRUD methods represent basic data manipulation operations in databases
or other data stores. Create is used to add new data, Read to read data, Update to update existing data, while Delete is used to delete data.

Liquibase is a database schema management tool. It allows developers to define the database structure using XML or YAML files,
and then automatically applies those changes to the database. This is useful for maintaining and updating databases during application development.

Swagger is an API documentation and testing tool. It allows developers to document APIs, defining their resources, operations,
parameters, and responses. It also provides an API testing interface directly from the documentation.

Hibernate is a Java library for working with relational databases. It facilitates the mapping of objects in the database,
which enables easier work with data in the application. Hibernate automatically generates and executes SQL queries,
simplifying communication between the application and the database.

CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts web pages or web applications from requesting resources from domains
other than the one from which the page or application was loaded. This is done to prevent potential security vulnerabilities and abuses.

The working principle of CORS involves adding HTTP headers to the request and response that allow or restrict access to resources from other domains.
For example, a server can add certain headers (such as Access-Control-Allow-Origin, Access-Control-Allow-Methods, etc.) to allow certain domains to access
resources.

Three-Layered Architecture is an architectural approach that organizes an application or system in three basic layers: presentation layer,
business logic layer, and data access layer.
    Presentation Layer: Here is the user interface and logic that is directly related to displaying information to users. This may include
    a web interface, a mobile application or any other user interface.
    Business Logic Layer: This is where the main business logic and application processes are located. All requests coming from the presentation
    layer are processed and implemented here. This layer focuses on business rules and business functionality.
    Data Access Layer: This is where communication with the database or other data sources is located. This layer is responsible for executing
    database queries, storing and retrieving data.
An example of a three-class architecture can be a web application where HTML and JavaScript represent the presentation layer, the server-side
code (eg PHP, Node.js) represents the business logic layer, while the database (eg MySQL, MongoDB) represents the data layer. Each layer is
independent and has clearly defined responsibilities. This architecture facilitates the maintainability, extensibility and testing of the application.
Java Persistence API (JPA):
    What is JPA? The Java Persistence API is a Java technology specification that defines a standardized way to manage data in Java applications,
    especially in the context of ORMs. JPA provides a set of APIs and rules that allow developers to easily use ORMs in their Java applications.
    JPA and Hibernate: Hibernate is one of the implementers of the JPA specification. This means that Hibernate adheres to the rules and standards
    defined in the JPA specification. Using JPA, developers can develop applications using standardized APIs and rules, and then, if necessary,
    replace Hibernate with another JPA specification implementer (eg EclipseLink) without major code changes.